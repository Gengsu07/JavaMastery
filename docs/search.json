[
  {
    "objectID": "Fundamental/index.html#date-2025-02-26",
    "href": "Fundamental/index.html#date-2025-02-26",
    "title": "Java Mastery - Fundamental",
    "section": "date: 2025-02-26",
    "text": "date: 2025-02-26"
  },
  {
    "objectID": "Fundamental/index.html#basic-syntax",
    "href": "Fundamental/index.html#basic-syntax",
    "title": "Java Mastery - Fundamental",
    "section": "Basic Syntax",
    "text": "Basic Syntax\nadsfasdf"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Java Mastery",
    "section": "",
    "text": "Home\nWelcome to Java Mastery!"
  },
  {
    "objectID": "Fundamental/index.html",
    "href": "Fundamental/index.html",
    "title": "Java Mastery - Fundamental",
    "section": "",
    "text": "public class Main{\n    public void main(){\n    // program logic\n    }\n}\n - Setiap program selalui ada Main Class - access modifier ditaruh didepan dari class atau method contohnya public - metode dapat dikumpulkan dalam class yang yg sama - class dapat diorganize dalam satu package\n\n\n\n\nClass –&gt; Pascal Case\nMetode –&gt; camelCase\n\n\n\n\n\n\n\nProgram dalam Java dapat dijalankan dalam semua platform sehingga platform independen\n\n\n\n\nAda 2 tahapan utama:\n\n\nSource code .java di compile menjadi bytecode. Bytecode adalah file yang berisi instruksi-instruksi yang dapat diinterpretasikan oleh JVM.\n\nBytecode dijalankan oleh JVM. JVM akan mengeksekusi instruksi-instruksi yang ada di bytecode untuk mengeksekusi program.\n\njadi setiap komputer harus memiliki JRE (Java Runtime Environment) yang berisi JVM untuk menjalankan program Java.\n\n\n\n\n\n sehingga merubah variable x, dan y yang memiliki nilai sama tidak akan merubah nilai variable yang lain. \n\n\n\nindependen, tiap variable memiliki alamat memori sendiri menyimpan simple data values\n\n \n\nbyte : an integer value between 128 to 127 \nint : an integer value between -2147483648 to 2147483647\nfloat: a 4 byte floating-point number\ndouble: a 8 byte floating-point number\nboolean: true / false\nchar: pakai single quote\n\npublic class Main {\n    public static void main(String[] args) {\n        float saldo = 10000000.33F;\n        byte umur = 28;\n        System.out.println(\"Hello, World!\");\n        System.out.println(saldo);\n    }\n}\nIntellij Idea saat merubah dari int ke float atau tipe data lain akan error karena IDE melakukan type checking, cara mengatasi error menambahkan F dibelakang angka\n\n\n\n\n merubah variable x, dan y yang memiliki nilai sama akan merubah nilai variable yang lain.\n\nmereferensikan alamat memori dari objek lain menyimpan komplek data\n\n\n\nString\nArray\nObject  Reference types adalah tipe data yang memiliki referensi ke objek lain. Objek yang direferensikan dapat berubah nilainya sehingga memiliki metode dan atribut dari kelas tersebut.\n\nimport java.awt.*;\nimport java.util.Date;\n\npublic class Main {\n    public static void main(String[] args) {\n        Date now = new Date();\n        Point point1 = new Point(1,1);\n        Point point2 = point1;\n        point2.x = 5;\n        System.out.println(point1);\n    }\n}\njava.awt.Point[x=5,y=1]\nmembuat variable now dengan tipe data Date yang merupakan reference type dari java.util.Date. Ketika dijalankan akan menampilkan waktu saat program dijalankan. jadi pakai new() untuk inisiasi membuat objek baru.\n\n\n\n\n\nmerupakan reference data type sehingga memiliki atribut dan metode. Namun, untuk memnbuat variable string bisa dengan cara singkat tanpa new() seeperti berikut\nString str = \"Hello World\";\n\nendswith\nstartswith\nlength\nindexOf****\ntoLowerCase\ntoUpperCase\ntolowerCase\ntrim\nreplace\n\nString is immutable, so return new object\npublic class Main {\n    public static void main(String[] args) {\n        Date now = new Date();\n        String kata = \"Hari ini tanggal :\" + now;\n        System.out.println(kata);\n        System.out.println(kata.length());\n        System.out.println(kata.startsWith(\"H\"));\n        System.out.println(kata.endsWith(\"H\"));\n        System.out.println(kata.toLowerCase());\n        System.out.println(kata.toUpperCase());\n        System.out.println(kata.indexOf(\"a\"));\n        System.out.println(kata.replace(\"i\",\"!\"));\n        System.out.println(kata);\n    }\n}\nHari ini tanggal :Wed Feb 26 15:57:33 WIB 2025\n46\ntrue\nfalse\nhari ini tanggal :wed feb 26 15:57:33 wib 2025\nHARI INI TANGGAL :WED FEB 26 15:57:33 WIB 2025\n1\nHar! !n! tanggal :Wed Feb 26 15:57:33 WIB 2025\nHari ini tanggal :Wed Feb 26 15:57:33 WIB 2025\n\n\n\n\nsyntax digunakan untuk menampilkan karakter yang sudah terdefinisi dalam bahasa pemrograman.\n\n\\n : untuk pindah ke baris berikutnya\n\\t : untuk membuat tab\n**\\“** : untuk menampilkan karakter”\n**\\‘** : untuk menampilkan karakter’\n\\ : untuk menampilkan karakter\n\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hari ini tanggal :\\n\" + new Date());\n        System.out.println(\"Hari ini tanggal :\\t\" + new Date());\n        System.out.println(\"Hari ini tanggal :\\\" \" + new Date());\n        System.out.println(\"Hari ini tanggal :\\' \" + new Date());\n        System.out.println(\"Hari ini tanggal :\\\\ \" + new Date());\n    }\n}\nHari ini tanggal :\nWed Feb 26 16:03:08 WIB 2025\nHari ini tanggal :  Wed Feb 26 16:03:08 WIB 2025\nHari ini tanggal : \" Wed Feb 26 16:03:08 WIB 2025\nHari ini tanggal :'Wed Feb 26 16:03:08 WIB 2025\nHari ini tanggal :\\ Wed Feb 26 16:03:08 WIB 2025\n\n\n\n\n\nFix Length : array dengan panjang yang sama, tidak bisa ditambahkan elemen atau dihapus elemen  Not Sorted : secara default\n\n\n\n\npakai datatype[] di deklarasi variable\nkarena merupakan reference type, maka pakai new datatype[]\ndi dalam [] adalah ukuran array\nakses elemen dengan []\n\nimport java.util.Arrays;\npublic class Main {\n    public static void main(String[] args) {\n        int[] numbers = new int[5];\n        numbers[0] = 1;\n        numbers[1] = 1;\n\n        System.out.println(numbers);\n        //[I@7b23ec81\n\n        System.out.println(Arrays.toString(numbers));\n        //[1, 1, 0, 0, 0]\n        // isi dari elemen yg tidak di inisiasi otomatis 0\n    }\n} \nhasilnya ternyata bukan isi dari array tetapi adalah alamat memori dari array. Untuk menampilkan kita bisa menggunakan metode toString()\n\n\n\n\npakai {}\n\nint[] numbers = {1,2,4,5,6};\n\n//Sorted\nArrays.sort(numbers);\n\n\n\n\n\nArray dapat memiliki lebih dari 1 dimensi.\n\n\n\npakai datatype[][] di deklarasi variable\nkarena merupakan reference type, maka pakai new datatype[][]\ndi dalam [] adalah ukuran array row, column, dst\nakses elemen dengan [] sejumlah dimensi\n\nclass MultiDImArray{\n    public static void oldWay(String[] args){\n        int[] [] tabledata = new int [2][3];\n        tabledata[0][0] = 7;\n        System.out.println(Arrays.deepToString(tabledata));\n    }\n    //[[7, 0, 0], [0, 0, 0]]\n\n    public static void newWay(String[] args){\n        int[][] tabledata = {{1,2,3},{4,5,6},{7,8,9}};\n        tabledata[1][0] = 8;\n        System.out.println(Arrays.deepToString(tabledata));\n    }\n    //[[1, 2, 3], [8, 5, 6], [7, 8, 9]]\n}\n\n\n\n\n\nseperti di bahasa yg lain,java juga memiliki konstanta. konstanta adalah variabel yang nilainya tidak berubah.\n\nfinal : untuk menandakan bahwa variabel tidak dapat diubah\nstatic : untuk menandakan bahwa variabel bersifat global\n\npublic class Constant {\n    public static void main(String [] args){\n        final float PI = 3.14f;\n        System.out.println(\"PI: \" + PI);\n    }\n}\n\ntambahkan final di deklarasi variabel PI, maka nilainya tidak dapat diubah.\ntambahkan f dibelakang angka agar menjadi float karena scr default desimal\n\n\n\n\n\n\n+, -, *, /, %, ++, –\n/: division operator, menghasilkan nilai sesuai dengan operand\n%: modulus operator, menghasilkan sisa bagi dari pembagian\n++ : increment operator,\n– : decrement operator,\nprefix maka akan menambah 1 terlebih dahulu kemudian mengembalikan nilai\npostfix maka akan mengembalikan nilai kemudian menambah 1\n\npublic class Arithmetics {\n    public static void main(String[] args) {\n        int result = 10+3;\n        int result2 = 10-3;\n        double result3 = 10/3.0;\n        int result4 = 10*3;\n        int x = 1;\n        int y = x++;\n        System.out.println(result); // 13\n        System.out.println(result2); // 7\n        System.out.println(result3); // 3.3333333333333335\n        System.out.println(result4); // 30\n        System.out.println(x); // 2\n        System.out.println(y); // 1\n    }\n}\n\n\n\n\nmelakukan konversi tipe data dari satu tipe ke tipe data lain.\n\n\n\nCasting dilakukan secara otomatis\nTipe data yang lebih sempit akan di cast ke tipe data yang lebih besar sehingga tidak ada data presisi yang hilang\nbyte &gt; short &gt; int &gt; long &gt; float &gt; double\n\n\n\n\n\nCasting dilakukan secara manual\nTipe data yang lebih besar akan di cast ke tipe data yang lebih sempit sehingga data presisi yang hilang\n\n\n\n\n\nmisal dari string ke int atau double\nmenggunakan Kelas wrapper dari primitif data type\nInteger.parseInt(“10”)\nDouble.parseDouble(“3.14”)\n\npublic class Casting {\n    public static void main(String[] args) {\n        short x = 1;\n        double pecahan = 5.0;\n        String angka = \"10\";\n\n        int hasil = x + 2;\n        double hasil2 = x + 3;\n        int hasil3 = (int) pecahan + 4;\n        System.out.println(hasil);\n        System.out.println(hasil2);\n        System.out.println(hasil3);\n        System.out.println(Integer.parseInt(angka));\n    }\n}\n\n\n\n\n\ndi dalam bawaan java, terdapat class Math yang berisi fungsi-fungsi matematika seperti:\n\nround\nceil\nfloor\nrandom\nmin\nmax,dll\n\npublic class MathClass {\n    public static void main(String[] args) {\n        double x = 1.1;\n        int acak= (int) (Math.random() *100);\n        int ceil = (int) Math.ceil(x);\n        System.out.println(Math.round(x));\n        System.out.println(ceil);\n        System.out.println(acak);\n        System.out.println(Math.max(10,23));\n        System.out.println(Math.min(10,23));\n    }\n}\n\n\n\n\ndi dalam java terdapat class java.text yang digunakan untuk format angka\n\ntidak bisa menggunakan = new NumberFormat() karena NumberFormat adalah interface/class Abstract\nbisa disimpan dulu dalam variable tipe NumberFormat …(code snippet ke currency)\natau langsung method chaining ke string … (code snippet ke persen)\n\nimport java.text.NumberFormat;\n\npublic class NumberFormats {\n    public static void main(String[] args) {\n        double nominal = 1234563.87;\n        // tidak bisa menggunakan = new NumberFormat() karena NumberFormat adalah interface/class Abstract\n\n        NumberFormat currency = NumberFormat.getCurrencyInstance();\n        System.out.println(currency.format(nominal)); // $1,234,563.87\n\n        float desimal = 0.12f;\n        String percent = NumberFormat.getPercentInstance().format(desimal);\n        System.out.println(percent); // 12.0%\n    }\n}\n\n\n\n\n\njava memiliki class Scanner yg bisa digunakan untuk merekam input\npakai System.in untuk membaca dari terminal\nmenggunakan method next… untuk membaca sesuai tipe data atau string atau seluruh baris\n\nimport java.util.Scanner;\n\npublic class ReadInput {\n    public static void main(String[] args) {\n        Scanner nama = new Scanner(System.in);\n        System.out.print(\"Nama: \");\n        String name = nama.nextLine().trim();\n\n        Scanner input = new Scanner(System.in);\n        System.out.print(\"Umur: \");\n        short umur = input.nextShort();\n        \n        System.out.println(\"Nama \" + name+ \" umur \" + umur);       \n        input.close();\n        nama.close();   \n    }\n    \n}\n\n\n\n\n\n\nJawaban sendiri:\n\npackage Types;\nimport java.util.Scanner;\nimport java.lang.Math;\nimport java.text.NumberFormat;\n\npublic class MortgageCalculator {\n    public static void main(String[] args) {\n        System.out.print(\"Principal: \");\n        Scanner principal = new Scanner(System.in);\n        long principalAmount = principal.nextLong();\n\n        System.out.print(\"Annual Interest Rate(%): \");\n        Scanner rate = new Scanner(System.in);\n        float interestRate = rate.nextFloat();\n\n        System.out.print(\"Period (Years): \");\n        Scanner period = new Scanner(System.in);\n        int periodeYears = period.nextInt() ;\n\n        double monthPayment = calculateMorgage(principalAmount, interestRate, periodeYears);\n        System.out.print(\"Mortgage: \" + NumberFormat.getCurrencyInstance().format(monthPayment));\n        \n        principal.close();\n        rate.close();\n        period.close();\n    }\n    public static double calculateMorgage(long principal, float interestRate, int periodeYears){\n        float monthlyInterestRate = interestRate / 1200;\n        int periodeMonth = periodeYears * 12;\n        double secretNumber = Math.pow(1+monthlyInterestRate, periodeMonth);\n        double monthPayment = principal * ((monthlyInterestRate * secretNumber)/(secretNumber-1));\n        return monthPayment;\n    }\n}\n\n\nDon’t use any MAGIC NUMBER. Instead use constant so others can understand what it is\nuse proper variableName –&gt; meaningfull and descriptive name\n\nSolusi pak Mosh\npackage Types;\nimport java.text.NumberFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        final byte MONTHS_IN_YEAR = 12;\n        final byte PERCENT = 100;\n\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Principal: \");\n        int principal = scanner.nextInt();\n\n        System.out.print(\"Annual Interest Rate: \");\n        float annualInterest = scanner.nextFloat();\n        float monthlyInterest = annualInterest / PERCENT / MONTHS_IN_YEAR;\n\n        System.out.print(\"Period (Years): \");\n        byte years = scanner.nextByte();\n        int numberOfPayments = years * MONTHS_IN_YEAR;\n\n        double mortgage = principal\n                    * (monthlyInterest * Math.pow(1 + monthlyInterest, numberOfPayments))\n                    / (Math.pow(1 + monthlyInterest, numberOfPayments) - 1);\n\n        String mortgageFormatted = NumberFormat.getCurrencyInstance().format(mortgage);\n        System.out.println(\"Mortgage: \" + mortgageFormatted);\n\n        scanner.close();\n    }\n}"
  },
  {
    "objectID": "Fundamental/index.html#anatomy-skeleton",
    "href": "Fundamental/index.html#anatomy-skeleton",
    "title": "Java Mastery - Fundamental",
    "section": "",
    "text": "public class Main{\n    public void main(){\n    // program logic\n    }\n}\n - Setiap program selalui ada Main Class - access modifier ditaruh didepan dari class atau method contohnya public - metode dapat dikumpulkan dalam class yang yg sama - class dapat diorganize dalam satu package\n\n\n\n\nClass –&gt; Pascal Case\nMetode –&gt; camelCase"
  },
  {
    "objectID": "Fundamental/index.html#java-is-platform-independent",
    "href": "Fundamental/index.html#java-is-platform-independent",
    "title": "Java Mastery - Fundamental",
    "section": "",
    "text": "Program dalam Java dapat dijalankan dalam semua platform sehingga platform independen\n\n\n\n\nAda 2 tahapan utama:\n\n\nSource code .java di compile menjadi bytecode. Bytecode adalah file yang berisi instruksi-instruksi yang dapat diinterpretasikan oleh JVM.\n\nBytecode dijalankan oleh JVM. JVM akan mengeksekusi instruksi-instruksi yang ada di bytecode untuk mengeksekusi program.\n\njadi setiap komputer harus memiliki JRE (Java Runtime Environment) yang berisi JVM untuk menjalankan program Java."
  },
  {
    "objectID": "Fundamental/index.html#data-types",
    "href": "Fundamental/index.html#data-types",
    "title": "Java Mastery - Fundamental",
    "section": "",
    "text": "sehingga merubah variable x, dan y yang memiliki nilai sama tidak akan merubah nilai variable yang lain. \n\n\n\nindependen, tiap variable memiliki alamat memori sendiri menyimpan simple data values\n\n \n\nbyte : an integer value between 128 to 127 \nint : an integer value between -2147483648 to 2147483647\nfloat: a 4 byte floating-point number\ndouble: a 8 byte floating-point number\nboolean: true / false\nchar: pakai single quote\n\npublic class Main {\n    public static void main(String[] args) {\n        float saldo = 10000000.33F;\n        byte umur = 28;\n        System.out.println(\"Hello, World!\");\n        System.out.println(saldo);\n    }\n}\nIntellij Idea saat merubah dari int ke float atau tipe data lain akan error karena IDE melakukan type checking, cara mengatasi error menambahkan F dibelakang angka\n\n\n\n\n merubah variable x, dan y yang memiliki nilai sama akan merubah nilai variable yang lain.\n\nmereferensikan alamat memori dari objek lain menyimpan komplek data\n\n\n\nString\nArray\nObject  Reference types adalah tipe data yang memiliki referensi ke objek lain. Objek yang direferensikan dapat berubah nilainya sehingga memiliki metode dan atribut dari kelas tersebut.\n\nimport java.awt.*;\nimport java.util.Date;\n\npublic class Main {\n    public static void main(String[] args) {\n        Date now = new Date();\n        Point point1 = new Point(1,1);\n        Point point2 = point1;\n        point2.x = 5;\n        System.out.println(point1);\n    }\n}\njava.awt.Point[x=5,y=1]\nmembuat variable now dengan tipe data Date yang merupakan reference type dari java.util.Date. Ketika dijalankan akan menampilkan waktu saat program dijalankan. jadi pakai new() untuk inisiasi membuat objek baru."
  },
  {
    "objectID": "Fundamental/index.html#string",
    "href": "Fundamental/index.html#string",
    "title": "Java Mastery - Fundamental",
    "section": "",
    "text": "merupakan reference data type sehingga memiliki atribut dan metode. Namun, untuk memnbuat variable string bisa dengan cara singkat tanpa new() seeperti berikut\nString str = \"Hello World\";\n\nendswith\nstartswith\nlength\nindexOf****\ntoLowerCase\ntoUpperCase\ntolowerCase\ntrim\nreplace\n\nString is immutable, so return new object\npublic class Main {\n    public static void main(String[] args) {\n        Date now = new Date();\n        String kata = \"Hari ini tanggal :\" + now;\n        System.out.println(kata);\n        System.out.println(kata.length());\n        System.out.println(kata.startsWith(\"H\"));\n        System.out.println(kata.endsWith(\"H\"));\n        System.out.println(kata.toLowerCase());\n        System.out.println(kata.toUpperCase());\n        System.out.println(kata.indexOf(\"a\"));\n        System.out.println(kata.replace(\"i\",\"!\"));\n        System.out.println(kata);\n    }\n}\nHari ini tanggal :Wed Feb 26 15:57:33 WIB 2025\n46\ntrue\nfalse\nhari ini tanggal :wed feb 26 15:57:33 wib 2025\nHARI INI TANGGAL :WED FEB 26 15:57:33 WIB 2025\n1\nHar! !n! tanggal :Wed Feb 26 15:57:33 WIB 2025\nHari ini tanggal :Wed Feb 26 15:57:33 WIB 2025"
  },
  {
    "objectID": "Fundamental/index.html#escape-sequence",
    "href": "Fundamental/index.html#escape-sequence",
    "title": "Java Mastery - Fundamental",
    "section": "",
    "text": "syntax digunakan untuk menampilkan karakter yang sudah terdefinisi dalam bahasa pemrograman.\n\n\\n : untuk pindah ke baris berikutnya\n\\t : untuk membuat tab\n**\\“** : untuk menampilkan karakter”\n**\\‘** : untuk menampilkan karakter’\n\\ : untuk menampilkan karakter\n\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hari ini tanggal :\\n\" + new Date());\n        System.out.println(\"Hari ini tanggal :\\t\" + new Date());\n        System.out.println(\"Hari ini tanggal :\\\" \" + new Date());\n        System.out.println(\"Hari ini tanggal :\\' \" + new Date());\n        System.out.println(\"Hari ini tanggal :\\\\ \" + new Date());\n    }\n}\nHari ini tanggal :\nWed Feb 26 16:03:08 WIB 2025\nHari ini tanggal :  Wed Feb 26 16:03:08 WIB 2025\nHari ini tanggal : \" Wed Feb 26 16:03:08 WIB 2025\nHari ini tanggal :'Wed Feb 26 16:03:08 WIB 2025\nHari ini tanggal :\\ Wed Feb 26 16:03:08 WIB 2025"
  },
  {
    "objectID": "Fundamental/index.html#arrays",
    "href": "Fundamental/index.html#arrays",
    "title": "Java Mastery - Fundamental",
    "section": "",
    "text": "Fix Length : array dengan panjang yang sama, tidak bisa ditambahkan elemen atau dihapus elemen  Not Sorted : secara default\n\n\n\n\npakai datatype[] di deklarasi variable\nkarena merupakan reference type, maka pakai new datatype[]\ndi dalam [] adalah ukuran array\nakses elemen dengan []\n\nimport java.util.Arrays;\npublic class Main {\n    public static void main(String[] args) {\n        int[] numbers = new int[5];\n        numbers[0] = 1;\n        numbers[1] = 1;\n\n        System.out.println(numbers);\n        //[I@7b23ec81\n\n        System.out.println(Arrays.toString(numbers));\n        //[1, 1, 0, 0, 0]\n        // isi dari elemen yg tidak di inisiasi otomatis 0\n    }\n} \nhasilnya ternyata bukan isi dari array tetapi adalah alamat memori dari array. Untuk menampilkan kita bisa menggunakan metode toString()\n\n\n\n\npakai {}\n\nint[] numbers = {1,2,4,5,6};\n\n//Sorted\nArrays.sort(numbers);"
  },
  {
    "objectID": "Fundamental/index.html#multi-dimensioanl-arrays",
    "href": "Fundamental/index.html#multi-dimensioanl-arrays",
    "title": "Java Mastery - Fundamental",
    "section": "",
    "text": "Array dapat memiliki lebih dari 1 dimensi.\n\n\n\npakai datatype[][] di deklarasi variable\nkarena merupakan reference type, maka pakai new datatype[][]\ndi dalam [] adalah ukuran array row, column, dst\nakses elemen dengan [] sejumlah dimensi\n\nclass MultiDImArray{\n    public static void oldWay(String[] args){\n        int[] [] tabledata = new int [2][3];\n        tabledata[0][0] = 7;\n        System.out.println(Arrays.deepToString(tabledata));\n    }\n    //[[7, 0, 0], [0, 0, 0]]\n\n    public static void newWay(String[] args){\n        int[][] tabledata = {{1,2,3},{4,5,6},{7,8,9}};\n        tabledata[1][0] = 8;\n        System.out.println(Arrays.deepToString(tabledata));\n    }\n    //[[1, 2, 3], [8, 5, 6], [7, 8, 9]]\n}"
  },
  {
    "objectID": "Fundamental/index.html#arithmetics-operators",
    "href": "Fundamental/index.html#arithmetics-operators",
    "title": "Java Mastery - Fundamental",
    "section": "",
    "text": "+, -, *, /, %, ++, –\n/: division operator, menghasilkan nilai sesuai dengan operand\n%: modulus operator, menghasilkan sisa bagi dari pembagian\n++ : increment operator,\n– : decrement operator,\nprefix maka akan menambah 1 terlebih dahulu kemudian mengembalikan nilai\npostfix maka akan mengembalikan nilai kemudian menambah 1\n\npublic class Arithmetics {\n    public static void main(String[] args) {\n        int result = 10+3;\n        int result2 = 10-3;\n        double result3 = 10/3.0;\n        int result4 = 10*3;\n        int x = 1;\n        int y = x++;\n        System.out.println(result); // 13\n        System.out.println(result2); // 7\n        System.out.println(result3); // 3.3333333333333335\n        System.out.println(result4); // 30\n        System.out.println(x); // 2\n        System.out.println(y); // 1\n    }\n}"
  },
  {
    "objectID": "Fundamental/index.html#constant",
    "href": "Fundamental/index.html#constant",
    "title": "Java Mastery - Fundamental",
    "section": "",
    "text": "seperti di bahasa yg lain,java juga memiliki konstanta. konstanta adalah variabel yang nilainya tidak berubah.\n\nfinal : untuk menandakan bahwa variabel tidak dapat diubah\nstatic : untuk menandakan bahwa variabel bersifat global\n\npublic class Constant {\n    public static void main(String [] args){\n        final float PI = 3.14f;\n        System.out.println(\"PI: \" + PI);\n    }\n}\n\ntambahkan final di deklarasi variabel PI, maka nilainya tidak dapat diubah.\ntambahkan f dibelakang angka agar menjadi float karena scr default desimal"
  },
  {
    "objectID": "Fundamental/index.html#casting",
    "href": "Fundamental/index.html#casting",
    "title": "Java Mastery - Fundamental",
    "section": "",
    "text": "melakukan konversi tipe data dari satu tipe ke tipe data lain.\n\n\n\nCasting dilakukan secara otomatis\nTipe data yang lebih sempit akan di cast ke tipe data yang lebih besar sehingga tidak ada data presisi yang hilang\nbyte &gt; short &gt; int &gt; long &gt; float &gt; double\n\n\n\n\n\nCasting dilakukan secara manual\nTipe data yang lebih besar akan di cast ke tipe data yang lebih sempit sehingga data presisi yang hilang\n\n\n\n\n\nmisal dari string ke int atau double\nmenggunakan Kelas wrapper dari primitif data type\nInteger.parseInt(“10”)\nDouble.parseDouble(“3.14”)\n\npublic class Casting {\n    public static void main(String[] args) {\n        short x = 1;\n        double pecahan = 5.0;\n        String angka = \"10\";\n\n        int hasil = x + 2;\n        double hasil2 = x + 3;\n        int hasil3 = (int) pecahan + 4;\n        System.out.println(hasil);\n        System.out.println(hasil2);\n        System.out.println(hasil3);\n        System.out.println(Integer.parseInt(angka));\n    }\n}"
  },
  {
    "objectID": "Fundamental/index.html#math-class",
    "href": "Fundamental/index.html#math-class",
    "title": "Java Mastery - Fundamental",
    "section": "",
    "text": "di dalam bawaan java, terdapat class Math yang berisi fungsi-fungsi matematika seperti:\n\nround\nceil\nfloor\nrandom\nmin\nmax,dll\n\npublic class MathClass {\n    public static void main(String[] args) {\n        double x = 1.1;\n        int acak= (int) (Math.random() *100);\n        int ceil = (int) Math.ceil(x);\n        System.out.println(Math.round(x));\n        System.out.println(ceil);\n        System.out.println(acak);\n        System.out.println(Math.max(10,23));\n        System.out.println(Math.min(10,23));\n    }\n}"
  },
  {
    "objectID": "Fundamental/index.html#formatting-numbers",
    "href": "Fundamental/index.html#formatting-numbers",
    "title": "Java Mastery - Fundamental",
    "section": "",
    "text": "di dalam java terdapat class java.text yang digunakan untuk format angka\n\ntidak bisa menggunakan = new NumberFormat() karena NumberFormat adalah interface/class Abstract\nbisa disimpan dulu dalam variable tipe NumberFormat …(code snippet ke currency)\natau langsung method chaining ke string … (code snippet ke persen)\n\nimport java.text.NumberFormat;\n\npublic class NumberFormats {\n    public static void main(String[] args) {\n        double nominal = 1234563.87;\n        // tidak bisa menggunakan = new NumberFormat() karena NumberFormat adalah interface/class Abstract\n\n        NumberFormat currency = NumberFormat.getCurrencyInstance();\n        System.out.println(currency.format(nominal)); // $1,234,563.87\n\n        float desimal = 0.12f;\n        String percent = NumberFormat.getPercentInstance().format(desimal);\n        System.out.println(percent); // 12.0%\n    }\n}"
  },
  {
    "objectID": "Fundamental/index.html#reading-input",
    "href": "Fundamental/index.html#reading-input",
    "title": "Java Mastery - Fundamental",
    "section": "",
    "text": "java memiliki class Scanner yg bisa digunakan untuk merekam input\npakai System.in untuk membaca dari terminal\nmenggunakan method next… untuk membaca sesuai tipe data atau string atau seluruh baris\n\nimport java.util.Scanner;\n\npublic class ReadInput {\n    public static void main(String[] args) {\n        Scanner nama = new Scanner(System.in);\n        System.out.print(\"Nama: \");\n        String name = nama.nextLine().trim();\n\n        Scanner input = new Scanner(System.in);\n        System.out.print(\"Umur: \");\n        short umur = input.nextShort();\n        \n        System.out.println(\"Nama \" + name+ \" umur \" + umur);       \n        input.close();\n        nama.close();   \n    }\n    \n}"
  },
  {
    "objectID": "Fundamental/index.html#mortgage-calculator",
    "href": "Fundamental/index.html#mortgage-calculator",
    "title": "Java Mastery - Fundamental",
    "section": "",
    "text": "Jawaban sendiri:\n\npackage Types;\nimport java.util.Scanner;\nimport java.lang.Math;\nimport java.text.NumberFormat;\n\npublic class MortgageCalculator {\n    public static void main(String[] args) {\n        System.out.print(\"Principal: \");\n        Scanner principal = new Scanner(System.in);\n        long principalAmount = principal.nextLong();\n\n        System.out.print(\"Annual Interest Rate(%): \");\n        Scanner rate = new Scanner(System.in);\n        float interestRate = rate.nextFloat();\n\n        System.out.print(\"Period (Years): \");\n        Scanner period = new Scanner(System.in);\n        int periodeYears = period.nextInt() ;\n\n        double monthPayment = calculateMorgage(principalAmount, interestRate, periodeYears);\n        System.out.print(\"Mortgage: \" + NumberFormat.getCurrencyInstance().format(monthPayment));\n        \n        principal.close();\n        rate.close();\n        period.close();\n    }\n    public static double calculateMorgage(long principal, float interestRate, int periodeYears){\n        float monthlyInterestRate = interestRate / 1200;\n        int periodeMonth = periodeYears * 12;\n        double secretNumber = Math.pow(1+monthlyInterestRate, periodeMonth);\n        double monthPayment = principal * ((monthlyInterestRate * secretNumber)/(secretNumber-1));\n        return monthPayment;\n    }\n}\n\n\nDon’t use any MAGIC NUMBER. Instead use constant so others can understand what it is\nuse proper variableName –&gt; meaningfull and descriptive name\n\nSolusi pak Mosh\npackage Types;\nimport java.text.NumberFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        final byte MONTHS_IN_YEAR = 12;\n        final byte PERCENT = 100;\n\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Principal: \");\n        int principal = scanner.nextInt();\n\n        System.out.print(\"Annual Interest Rate: \");\n        float annualInterest = scanner.nextFloat();\n        float monthlyInterest = annualInterest / PERCENT / MONTHS_IN_YEAR;\n\n        System.out.print(\"Period (Years): \");\n        byte years = scanner.nextByte();\n        int numberOfPayments = years * MONTHS_IN_YEAR;\n\n        double mortgage = principal\n                    * (monthlyInterest * Math.pow(1 + monthlyInterest, numberOfPayments))\n                    / (Math.pow(1 + monthlyInterest, numberOfPayments) - 1);\n\n        String mortgageFormatted = NumberFormat.getCurrencyInstance().format(mortgage);\n        System.out.println(\"Mortgage: \" + mortgageFormatted);\n\n        scanner.close();\n    }\n}"
  },
  {
    "objectID": "Fundamental/types.html",
    "href": "Fundamental/types.html",
    "title": "Fundamental - Types",
    "section": "",
    "text": "public class Main{\n    public void main(){\n    // program logic\n    }\n}\n - Setiap program selalui ada Main Class - access modifier ditaruh didepan dari class atau method contohnya public - metode dapat dikumpulkan dalam class yang yg sama - class dapat diorganize dalam satu package\n\n\n\n\nClass –&gt; Pascal Case\nMetode –&gt; camelCase\n\n\n\n\n\n\n\nProgram dalam Java dapat dijalankan dalam semua platform sehingga platform independen\n\n\n\n\nAda 2 tahapan utama:\n\n\nSource code .java di compile menjadi bytecode. Bytecode adalah file yang berisi instruksi-instruksi yang dapat diinterpretasikan oleh JVM.\n\nBytecode dijalankan oleh JVM. JVM akan mengeksekusi instruksi-instruksi yang ada di bytecode untuk mengeksekusi program.\n\njadi setiap komputer harus memiliki JRE (Java Runtime Environment) yang berisi JVM untuk menjalankan program Java.\n\n\n\n\n\n sehingga merubah variable x, dan y yang memiliki nilai sama tidak akan merubah nilai variable yang lain. \n\n\n\nindependen, tiap variable memiliki alamat memori sendiri menyimpan simple data values\n\n \n\nbyte : an integer value between 128 to 127 \nint : an integer value between -2147483648 to 2147483647\nfloat: a 4 byte floating-point number\ndouble: a 8 byte floating-point number\nboolean: true / false\nchar: pakai single quote\n\npublic class Main {\n    public static void main(String[] args) {\n        float saldo = 10000000.33F;\n        byte umur = 28;\n        System.out.println(\"Hello, World!\");\n        System.out.println(saldo);\n    }\n}\nIntellij Idea saat merubah dari int ke float atau tipe data lain akan error karena IDE melakukan type checking, cara mengatasi error menambahkan F dibelakang angka\n\n\n\n\n merubah variable x, dan y yang memiliki nilai sama akan merubah nilai variable yang lain.\n\nmereferensikan alamat memori dari objek lain menyimpan komplek data\n\n\n\nString\nArray\nObject  Reference types adalah tipe data yang memiliki referensi ke objek lain. Objek yang direferensikan dapat berubah nilainya sehingga memiliki metode dan atribut dari kelas tersebut.\n\nimport java.awt.*;\nimport java.util.Date;\n\npublic class Main {\n    public static void main(String[] args) {\n        Date now = new Date();\n        Point point1 = new Point(1,1);\n        Point point2 = point1;\n        point2.x = 5;\n        System.out.println(point1);\n    }\n}\njava.awt.Point[x=5,y=1]\nmembuat variable now dengan tipe data Date yang merupakan reference type dari java.util.Date. Ketika dijalankan akan menampilkan waktu saat program dijalankan. jadi pakai new() untuk inisiasi membuat objek baru.\n\n\n\n\n\nmerupakan reference data type sehingga memiliki atribut dan metode. Namun, untuk memnbuat variable string bisa dengan cara singkat tanpa new() seeperti berikut\nString str = \"Hello World\";\n\nendswith\nstartswith\nlength\nindexOf****\ntoLowerCase\ntoUpperCase\ntolowerCase\ntrim\nreplace\n\nString is immutable, so return new object\npublic class Main {\n    public static void main(String[] args) {\n        Date now = new Date();\n        String kata = \"Hari ini tanggal :\" + now;\n        System.out.println(kata);\n        System.out.println(kata.length());\n        System.out.println(kata.startsWith(\"H\"));\n        System.out.println(kata.endsWith(\"H\"));\n        System.out.println(kata.toLowerCase());\n        System.out.println(kata.toUpperCase());\n        System.out.println(kata.indexOf(\"a\"));\n        System.out.println(kata.replace(\"i\",\"!\"));\n        System.out.println(kata);\n    }\n}\nHari ini tanggal :Wed Feb 26 15:57:33 WIB 2025\n46\ntrue\nfalse\nhari ini tanggal :wed feb 26 15:57:33 wib 2025\nHARI INI TANGGAL :WED FEB 26 15:57:33 WIB 2025\n1\nHar! !n! tanggal :Wed Feb 26 15:57:33 WIB 2025\nHari ini tanggal :Wed Feb 26 15:57:33 WIB 2025\n\n\n\n\nsyntax digunakan untuk menampilkan karakter yang sudah terdefinisi dalam bahasa pemrograman.\n\n\\n : untuk pindah ke baris berikutnya\n\\t : untuk membuat tab\n**\\“** : untuk menampilkan karakter”\n**\\‘** : untuk menampilkan karakter’\n\\ : untuk menampilkan karakter\n\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hari ini tanggal :\\n\" + new Date());\n        System.out.println(\"Hari ini tanggal :\\t\" + new Date());\n        System.out.println(\"Hari ini tanggal :\\\" \" + new Date());\n        System.out.println(\"Hari ini tanggal :\\' \" + new Date());\n        System.out.println(\"Hari ini tanggal :\\\\ \" + new Date());\n    }\n}\nHari ini tanggal :\nWed Feb 26 16:03:08 WIB 2025\nHari ini tanggal :  Wed Feb 26 16:03:08 WIB 2025\nHari ini tanggal : \" Wed Feb 26 16:03:08 WIB 2025\nHari ini tanggal :'Wed Feb 26 16:03:08 WIB 2025\nHari ini tanggal :\\ Wed Feb 26 16:03:08 WIB 2025\n\n\n\n\n\nFix Length : array dengan panjang yang sama, tidak bisa ditambahkan elemen atau dihapus elemen  Not Sorted : secara default\n\n\n\n\npakai datatype[] di deklarasi variable\nkarena merupakan reference type, maka pakai new datatype[]\ndi dalam [] adalah ukuran array\nakses elemen dengan []\n\nimport java.util.Arrays;\npublic class Main {\n    public static void main(String[] args) {\n        int[] numbers = new int[5];\n        numbers[0] = 1;\n        numbers[1] = 1;\n\n        System.out.println(numbers);\n        //[I@7b23ec81\n\n        System.out.println(Arrays.toString(numbers));\n        //[1, 1, 0, 0, 0]\n        // isi dari elemen yg tidak di inisiasi otomatis 0\n    }\n} \nhasilnya ternyata bukan isi dari array tetapi adalah alamat memori dari array. Untuk menampilkan kita bisa menggunakan metode toString()\n\n\n\n\npakai {}\n\nint[] numbers = {1,2,4,5,6};\n\n//Sorted\nArrays.sort(numbers);\n\n\n\n\n\nArray dapat memiliki lebih dari 1 dimensi.\n\n\n\npakai datatype[][] di deklarasi variable\nkarena merupakan reference type, maka pakai new datatype[][]\ndi dalam [] adalah ukuran array row, column, dst\nakses elemen dengan [] sejumlah dimensi\n\nclass MultiDImArray{\n    public static void oldWay(String[] args){\n        int[] [] tabledata = new int [2][3];\n        tabledata[0][0] = 7;\n        System.out.println(Arrays.deepToString(tabledata));\n    }\n    //[[7, 0, 0], [0, 0, 0]]\n\n    public static void newWay(String[] args){\n        int[][] tabledata = {{1,2,3},{4,5,6},{7,8,9}};\n        tabledata[1][0] = 8;\n        System.out.println(Arrays.deepToString(tabledata));\n    }\n    //[[1, 2, 3], [8, 5, 6], [7, 8, 9]]\n}\n\n\n\n\n\nseperti di bahasa yg lain,java juga memiliki konstanta. konstanta adalah variabel yang nilainya tidak berubah.\n\nfinal : untuk menandakan bahwa variabel tidak dapat diubah\nstatic : untuk menandakan bahwa variabel bersifat global\n\npublic class Constant {\n    public static void main(String [] args){\n        final float PI = 3.14f;\n        System.out.println(\"PI: \" + PI);\n    }\n}\n\ntambahkan final di deklarasi variabel PI, maka nilainya tidak dapat diubah.\ntambahkan f dibelakang angka agar menjadi float karena scr default desimal\n\n\n\n\n\n\n+, -, *, /, %, ++, –\n/: division operator, menghasilkan nilai sesuai dengan operand\n%: modulus operator, menghasilkan sisa bagi dari pembagian\n++ : increment operator,\n– : decrement operator,\nprefix maka akan menambah 1 terlebih dahulu kemudian mengembalikan nilai\npostfix maka akan mengembalikan nilai kemudian menambah 1\n\npublic class Arithmetics {\n    public static void main(String[] args) {\n        int result = 10+3;\n        int result2 = 10-3;\n        double result3 = 10/3.0;\n        int result4 = 10*3;\n        int x = 1;\n        int y = x++;\n        System.out.println(result); // 13\n        System.out.println(result2); // 7\n        System.out.println(result3); // 3.3333333333333335\n        System.out.println(result4); // 30\n        System.out.println(x); // 2\n        System.out.println(y); // 1\n    }\n}\n\n\n\n\nmelakukan konversi tipe data dari satu tipe ke tipe data lain.\n\n\n\nCasting dilakukan secara otomatis\nTipe data yang lebih sempit akan di cast ke tipe data yang lebih besar sehingga tidak ada data presisi yang hilang\nbyte &gt; short &gt; int &gt; long &gt; float &gt; double\n\n\n\n\n\nCasting dilakukan secara manual\nTipe data yang lebih besar akan di cast ke tipe data yang lebih sempit sehingga data presisi yang hilang\n\n\n\n\n\nmisal dari string ke int atau double\nmenggunakan Kelas wrapper dari primitif data type\nInteger.parseInt(“10”)\nDouble.parseDouble(“3.14”)\n\npublic class Casting {\n    public static void main(String[] args) {\n        short x = 1;\n        double pecahan = 5.0;\n        String angka = \"10\";\n\n        int hasil = x + 2;\n        double hasil2 = x + 3;\n        int hasil3 = (int) pecahan + 4;\n        System.out.println(hasil);\n        System.out.println(hasil2);\n        System.out.println(hasil3);\n        System.out.println(Integer.parseInt(angka));\n    }\n}\n\n\n\n\n\ndi dalam bawaan java, terdapat class Math yang berisi fungsi-fungsi matematika seperti:\n\nround\nceil\nfloor\nrandom\nmin\nmax,dll\n\npublic class MathClass {\n    public static void main(String[] args) {\n        double x = 1.1;\n        int acak= (int) (Math.random() *100);\n        int ceil = (int) Math.ceil(x);\n        System.out.println(Math.round(x));\n        System.out.println(ceil);\n        System.out.println(acak);\n        System.out.println(Math.max(10,23));\n        System.out.println(Math.min(10,23));\n    }\n}\n\n\n\n\ndi dalam java terdapat class java.text yang digunakan untuk format angka\n\ntidak bisa menggunakan = new NumberFormat() karena NumberFormat adalah interface/class Abstract\nbisa disimpan dulu dalam variable tipe NumberFormat …(code snippet ke currency)\natau langsung method chaining ke string … (code snippet ke persen)\n\nimport java.text.NumberFormat;\n\npublic class NumberFormats {\n    public static void main(String[] args) {\n        double nominal = 1234563.87;\n        // tidak bisa menggunakan = new NumberFormat() karena NumberFormat adalah interface/class Abstract\n\n        NumberFormat currency = NumberFormat.getCurrencyInstance();\n        System.out.println(currency.format(nominal)); // $1,234,563.87\n\n        float desimal = 0.12f;\n        String percent = NumberFormat.getPercentInstance().format(desimal);\n        System.out.println(percent); // 12.0%\n    }\n}\n\n\n\n\n\njava memiliki class Scanner yg bisa digunakan untuk merekam input\npakai System.in untuk membaca dari terminal\nmenggunakan method next… untuk membaca sesuai tipe data atau string atau seluruh baris\n\nimport java.util.Scanner;\n\npublic class ReadInput {\n    public static void main(String[] args) {\n        Scanner nama = new Scanner(System.in);\n        System.out.print(\"Nama: \");\n        String name = nama.nextLine().trim();\n\n        Scanner input = new Scanner(System.in);\n        System.out.print(\"Umur: \");\n        short umur = input.nextShort();\n        \n        System.out.println(\"Nama \" + name+ \" umur \" + umur);       \n        input.close();\n        nama.close();   \n    }\n    \n}\n\n\n\n\n\n\nJawaban sendiri:\n\npackage Types;\nimport java.util.Scanner;\nimport java.lang.Math;\nimport java.text.NumberFormat;\n\npublic class MortgageCalculator {\n    public static void main(String[] args) {\n        System.out.print(\"Principal: \");\n        Scanner principal = new Scanner(System.in);\n        long principalAmount = principal.nextLong();\n\n        System.out.print(\"Annual Interest Rate(%): \");\n        Scanner rate = new Scanner(System.in);\n        float interestRate = rate.nextFloat();\n\n        System.out.print(\"Period (Years): \");\n        Scanner period = new Scanner(System.in);\n        int periodeYears = period.nextInt() ;\n\n        double monthPayment = calculateMorgage(principalAmount, interestRate, periodeYears);\n        System.out.print(\"Mortgage: \" + NumberFormat.getCurrencyInstance().format(monthPayment));\n        \n        principal.close();\n        rate.close();\n        period.close();\n    }\n    public static double calculateMorgage(long principal, float interestRate, int periodeYears){\n        float monthlyInterestRate = interestRate / 1200;\n        int periodeMonth = periodeYears * 12;\n        double secretNumber = Math.pow(1+monthlyInterestRate, periodeMonth);\n        double monthPayment = principal * ((monthlyInterestRate * secretNumber)/(secretNumber-1));\n        return monthPayment;\n    }\n}\n\n\nDon’t use any MAGIC NUMBER. Instead use constant so others can understand what it is\nuse proper variableName –&gt; meaningfull and descriptive name\n\nSolusi pak Mosh\npackage Types;\nimport java.text.NumberFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        final byte MONTHS_IN_YEAR = 12;\n        final byte PERCENT = 100;\n\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Principal: \");\n        int principal = scanner.nextInt();\n\n        System.out.print(\"Annual Interest Rate: \");\n        float annualInterest = scanner.nextFloat();\n        float monthlyInterest = annualInterest / PERCENT / MONTHS_IN_YEAR;\n\n        System.out.print(\"Period (Years): \");\n        byte years = scanner.nextByte();\n        int numberOfPayments = years * MONTHS_IN_YEAR;\n\n        double mortgage = principal\n                    * (monthlyInterest * Math.pow(1 + monthlyInterest, numberOfPayments))\n                    / (Math.pow(1 + monthlyInterest, numberOfPayments) - 1);\n\n        String mortgageFormatted = NumberFormat.getCurrencyInstance().format(mortgage);\n        System.out.println(\"Mortgage: \" + mortgageFormatted);\n\n        scanner.close();\n    }\n}",
    "crumbs": [
      "Fundamental",
      "Types"
    ]
  },
  {
    "objectID": "Fundamental/types.html#anatomy-skeleton",
    "href": "Fundamental/types.html#anatomy-skeleton",
    "title": "Fundamental - Types",
    "section": "",
    "text": "public class Main{\n    public void main(){\n    // program logic\n    }\n}\n - Setiap program selalui ada Main Class - access modifier ditaruh didepan dari class atau method contohnya public - metode dapat dikumpulkan dalam class yang yg sama - class dapat diorganize dalam satu package\n\n\n\n\nClass –&gt; Pascal Case\nMetode –&gt; camelCase",
    "crumbs": [
      "Fundamental",
      "Types"
    ]
  },
  {
    "objectID": "Fundamental/types.html#java-is-platform-independent",
    "href": "Fundamental/types.html#java-is-platform-independent",
    "title": "Fundamental - Types",
    "section": "",
    "text": "Program dalam Java dapat dijalankan dalam semua platform sehingga platform independen\n\n\n\n\nAda 2 tahapan utama:\n\n\nSource code .java di compile menjadi bytecode. Bytecode adalah file yang berisi instruksi-instruksi yang dapat diinterpretasikan oleh JVM.\n\nBytecode dijalankan oleh JVM. JVM akan mengeksekusi instruksi-instruksi yang ada di bytecode untuk mengeksekusi program.\n\njadi setiap komputer harus memiliki JRE (Java Runtime Environment) yang berisi JVM untuk menjalankan program Java.",
    "crumbs": [
      "Fundamental",
      "Types"
    ]
  },
  {
    "objectID": "Fundamental/types.html#data-types",
    "href": "Fundamental/types.html#data-types",
    "title": "Fundamental - Types",
    "section": "",
    "text": "sehingga merubah variable x, dan y yang memiliki nilai sama tidak akan merubah nilai variable yang lain. \n\n\n\nindependen, tiap variable memiliki alamat memori sendiri menyimpan simple data values\n\n \n\nbyte : an integer value between 128 to 127 \nint : an integer value between -2147483648 to 2147483647\nfloat: a 4 byte floating-point number\ndouble: a 8 byte floating-point number\nboolean: true / false\nchar: pakai single quote\n\npublic class Main {\n    public static void main(String[] args) {\n        float saldo = 10000000.33F;\n        byte umur = 28;\n        System.out.println(\"Hello, World!\");\n        System.out.println(saldo);\n    }\n}\nIntellij Idea saat merubah dari int ke float atau tipe data lain akan error karena IDE melakukan type checking, cara mengatasi error menambahkan F dibelakang angka\n\n\n\n\n merubah variable x, dan y yang memiliki nilai sama akan merubah nilai variable yang lain.\n\nmereferensikan alamat memori dari objek lain menyimpan komplek data\n\n\n\nString\nArray\nObject  Reference types adalah tipe data yang memiliki referensi ke objek lain. Objek yang direferensikan dapat berubah nilainya sehingga memiliki metode dan atribut dari kelas tersebut.\n\nimport java.awt.*;\nimport java.util.Date;\n\npublic class Main {\n    public static void main(String[] args) {\n        Date now = new Date();\n        Point point1 = new Point(1,1);\n        Point point2 = point1;\n        point2.x = 5;\n        System.out.println(point1);\n    }\n}\njava.awt.Point[x=5,y=1]\nmembuat variable now dengan tipe data Date yang merupakan reference type dari java.util.Date. Ketika dijalankan akan menampilkan waktu saat program dijalankan. jadi pakai new() untuk inisiasi membuat objek baru.",
    "crumbs": [
      "Fundamental",
      "Types"
    ]
  },
  {
    "objectID": "Fundamental/types.html#string",
    "href": "Fundamental/types.html#string",
    "title": "Fundamental - Types",
    "section": "",
    "text": "merupakan reference data type sehingga memiliki atribut dan metode. Namun, untuk memnbuat variable string bisa dengan cara singkat tanpa new() seeperti berikut\nString str = \"Hello World\";\n\nendswith\nstartswith\nlength\nindexOf****\ntoLowerCase\ntoUpperCase\ntolowerCase\ntrim\nreplace\n\nString is immutable, so return new object\npublic class Main {\n    public static void main(String[] args) {\n        Date now = new Date();\n        String kata = \"Hari ini tanggal :\" + now;\n        System.out.println(kata);\n        System.out.println(kata.length());\n        System.out.println(kata.startsWith(\"H\"));\n        System.out.println(kata.endsWith(\"H\"));\n        System.out.println(kata.toLowerCase());\n        System.out.println(kata.toUpperCase());\n        System.out.println(kata.indexOf(\"a\"));\n        System.out.println(kata.replace(\"i\",\"!\"));\n        System.out.println(kata);\n    }\n}\nHari ini tanggal :Wed Feb 26 15:57:33 WIB 2025\n46\ntrue\nfalse\nhari ini tanggal :wed feb 26 15:57:33 wib 2025\nHARI INI TANGGAL :WED FEB 26 15:57:33 WIB 2025\n1\nHar! !n! tanggal :Wed Feb 26 15:57:33 WIB 2025\nHari ini tanggal :Wed Feb 26 15:57:33 WIB 2025",
    "crumbs": [
      "Fundamental",
      "Types"
    ]
  },
  {
    "objectID": "Fundamental/types.html#escape-sequence",
    "href": "Fundamental/types.html#escape-sequence",
    "title": "Fundamental - Types",
    "section": "",
    "text": "syntax digunakan untuk menampilkan karakter yang sudah terdefinisi dalam bahasa pemrograman.\n\n\\n : untuk pindah ke baris berikutnya\n\\t : untuk membuat tab\n**\\“** : untuk menampilkan karakter”\n**\\‘** : untuk menampilkan karakter’\n\\ : untuk menampilkan karakter\n\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hari ini tanggal :\\n\" + new Date());\n        System.out.println(\"Hari ini tanggal :\\t\" + new Date());\n        System.out.println(\"Hari ini tanggal :\\\" \" + new Date());\n        System.out.println(\"Hari ini tanggal :\\' \" + new Date());\n        System.out.println(\"Hari ini tanggal :\\\\ \" + new Date());\n    }\n}\nHari ini tanggal :\nWed Feb 26 16:03:08 WIB 2025\nHari ini tanggal :  Wed Feb 26 16:03:08 WIB 2025\nHari ini tanggal : \" Wed Feb 26 16:03:08 WIB 2025\nHari ini tanggal :'Wed Feb 26 16:03:08 WIB 2025\nHari ini tanggal :\\ Wed Feb 26 16:03:08 WIB 2025",
    "crumbs": [
      "Fundamental",
      "Types"
    ]
  },
  {
    "objectID": "Fundamental/types.html#arrays",
    "href": "Fundamental/types.html#arrays",
    "title": "Fundamental - Types",
    "section": "",
    "text": "Fix Length : array dengan panjang yang sama, tidak bisa ditambahkan elemen atau dihapus elemen  Not Sorted : secara default\n\n\n\n\npakai datatype[] di deklarasi variable\nkarena merupakan reference type, maka pakai new datatype[]\ndi dalam [] adalah ukuran array\nakses elemen dengan []\n\nimport java.util.Arrays;\npublic class Main {\n    public static void main(String[] args) {\n        int[] numbers = new int[5];\n        numbers[0] = 1;\n        numbers[1] = 1;\n\n        System.out.println(numbers);\n        //[I@7b23ec81\n\n        System.out.println(Arrays.toString(numbers));\n        //[1, 1, 0, 0, 0]\n        // isi dari elemen yg tidak di inisiasi otomatis 0\n    }\n} \nhasilnya ternyata bukan isi dari array tetapi adalah alamat memori dari array. Untuk menampilkan kita bisa menggunakan metode toString()\n\n\n\n\npakai {}\n\nint[] numbers = {1,2,4,5,6};\n\n//Sorted\nArrays.sort(numbers);",
    "crumbs": [
      "Fundamental",
      "Types"
    ]
  },
  {
    "objectID": "Fundamental/types.html#multi-dimensioanl-arrays",
    "href": "Fundamental/types.html#multi-dimensioanl-arrays",
    "title": "Fundamental - Types",
    "section": "",
    "text": "Array dapat memiliki lebih dari 1 dimensi.\n\n\n\npakai datatype[][] di deklarasi variable\nkarena merupakan reference type, maka pakai new datatype[][]\ndi dalam [] adalah ukuran array row, column, dst\nakses elemen dengan [] sejumlah dimensi\n\nclass MultiDImArray{\n    public static void oldWay(String[] args){\n        int[] [] tabledata = new int [2][3];\n        tabledata[0][0] = 7;\n        System.out.println(Arrays.deepToString(tabledata));\n    }\n    //[[7, 0, 0], [0, 0, 0]]\n\n    public static void newWay(String[] args){\n        int[][] tabledata = {{1,2,3},{4,5,6},{7,8,9}};\n        tabledata[1][0] = 8;\n        System.out.println(Arrays.deepToString(tabledata));\n    }\n    //[[1, 2, 3], [8, 5, 6], [7, 8, 9]]\n}",
    "crumbs": [
      "Fundamental",
      "Types"
    ]
  },
  {
    "objectID": "Fundamental/types.html#constant",
    "href": "Fundamental/types.html#constant",
    "title": "Fundamental - Types",
    "section": "",
    "text": "seperti di bahasa yg lain,java juga memiliki konstanta. konstanta adalah variabel yang nilainya tidak berubah.\n\nfinal : untuk menandakan bahwa variabel tidak dapat diubah\nstatic : untuk menandakan bahwa variabel bersifat global\n\npublic class Constant {\n    public static void main(String [] args){\n        final float PI = 3.14f;\n        System.out.println(\"PI: \" + PI);\n    }\n}\n\ntambahkan final di deklarasi variabel PI, maka nilainya tidak dapat diubah.\ntambahkan f dibelakang angka agar menjadi float karena scr default desimal",
    "crumbs": [
      "Fundamental",
      "Types"
    ]
  },
  {
    "objectID": "Fundamental/types.html#arithmetics-operators",
    "href": "Fundamental/types.html#arithmetics-operators",
    "title": "Fundamental - Types",
    "section": "",
    "text": "+, -, *, /, %, ++, –\n/: division operator, menghasilkan nilai sesuai dengan operand\n%: modulus operator, menghasilkan sisa bagi dari pembagian\n++ : increment operator,\n– : decrement operator,\nprefix maka akan menambah 1 terlebih dahulu kemudian mengembalikan nilai\npostfix maka akan mengembalikan nilai kemudian menambah 1\n\npublic class Arithmetics {\n    public static void main(String[] args) {\n        int result = 10+3;\n        int result2 = 10-3;\n        double result3 = 10/3.0;\n        int result4 = 10*3;\n        int x = 1;\n        int y = x++;\n        System.out.println(result); // 13\n        System.out.println(result2); // 7\n        System.out.println(result3); // 3.3333333333333335\n        System.out.println(result4); // 30\n        System.out.println(x); // 2\n        System.out.println(y); // 1\n    }\n}",
    "crumbs": [
      "Fundamental",
      "Types"
    ]
  },
  {
    "objectID": "Fundamental/types.html#casting",
    "href": "Fundamental/types.html#casting",
    "title": "Fundamental - Types",
    "section": "",
    "text": "melakukan konversi tipe data dari satu tipe ke tipe data lain.\n\n\n\nCasting dilakukan secara otomatis\nTipe data yang lebih sempit akan di cast ke tipe data yang lebih besar sehingga tidak ada data presisi yang hilang\nbyte &gt; short &gt; int &gt; long &gt; float &gt; double\n\n\n\n\n\nCasting dilakukan secara manual\nTipe data yang lebih besar akan di cast ke tipe data yang lebih sempit sehingga data presisi yang hilang\n\n\n\n\n\nmisal dari string ke int atau double\nmenggunakan Kelas wrapper dari primitif data type\nInteger.parseInt(“10”)\nDouble.parseDouble(“3.14”)\n\npublic class Casting {\n    public static void main(String[] args) {\n        short x = 1;\n        double pecahan = 5.0;\n        String angka = \"10\";\n\n        int hasil = x + 2;\n        double hasil2 = x + 3;\n        int hasil3 = (int) pecahan + 4;\n        System.out.println(hasil);\n        System.out.println(hasil2);\n        System.out.println(hasil3);\n        System.out.println(Integer.parseInt(angka));\n    }\n}",
    "crumbs": [
      "Fundamental",
      "Types"
    ]
  },
  {
    "objectID": "Fundamental/types.html#math-class",
    "href": "Fundamental/types.html#math-class",
    "title": "Fundamental - Types",
    "section": "",
    "text": "di dalam bawaan java, terdapat class Math yang berisi fungsi-fungsi matematika seperti:\n\nround\nceil\nfloor\nrandom\nmin\nmax,dll\n\npublic class MathClass {\n    public static void main(String[] args) {\n        double x = 1.1;\n        int acak= (int) (Math.random() *100);\n        int ceil = (int) Math.ceil(x);\n        System.out.println(Math.round(x));\n        System.out.println(ceil);\n        System.out.println(acak);\n        System.out.println(Math.max(10,23));\n        System.out.println(Math.min(10,23));\n    }\n}",
    "crumbs": [
      "Fundamental",
      "Types"
    ]
  },
  {
    "objectID": "Fundamental/types.html#formatting-numbers",
    "href": "Fundamental/types.html#formatting-numbers",
    "title": "Fundamental - Types",
    "section": "",
    "text": "di dalam java terdapat class java.text yang digunakan untuk format angka\n\ntidak bisa menggunakan = new NumberFormat() karena NumberFormat adalah interface/class Abstract\nbisa disimpan dulu dalam variable tipe NumberFormat …(code snippet ke currency)\natau langsung method chaining ke string … (code snippet ke persen)\n\nimport java.text.NumberFormat;\n\npublic class NumberFormats {\n    public static void main(String[] args) {\n        double nominal = 1234563.87;\n        // tidak bisa menggunakan = new NumberFormat() karena NumberFormat adalah interface/class Abstract\n\n        NumberFormat currency = NumberFormat.getCurrencyInstance();\n        System.out.println(currency.format(nominal)); // $1,234,563.87\n\n        float desimal = 0.12f;\n        String percent = NumberFormat.getPercentInstance().format(desimal);\n        System.out.println(percent); // 12.0%\n    }\n}",
    "crumbs": [
      "Fundamental",
      "Types"
    ]
  },
  {
    "objectID": "Fundamental/types.html#reading-input",
    "href": "Fundamental/types.html#reading-input",
    "title": "Fundamental - Types",
    "section": "",
    "text": "java memiliki class Scanner yg bisa digunakan untuk merekam input\npakai System.in untuk membaca dari terminal\nmenggunakan method next… untuk membaca sesuai tipe data atau string atau seluruh baris\n\nimport java.util.Scanner;\n\npublic class ReadInput {\n    public static void main(String[] args) {\n        Scanner nama = new Scanner(System.in);\n        System.out.print(\"Nama: \");\n        String name = nama.nextLine().trim();\n\n        Scanner input = new Scanner(System.in);\n        System.out.print(\"Umur: \");\n        short umur = input.nextShort();\n        \n        System.out.println(\"Nama \" + name+ \" umur \" + umur);       \n        input.close();\n        nama.close();   \n    }\n    \n}",
    "crumbs": [
      "Fundamental",
      "Types"
    ]
  },
  {
    "objectID": "Fundamental/types.html#mortgage-calculator",
    "href": "Fundamental/types.html#mortgage-calculator",
    "title": "Fundamental - Types",
    "section": "",
    "text": "Jawaban sendiri:\n\npackage Types;\nimport java.util.Scanner;\nimport java.lang.Math;\nimport java.text.NumberFormat;\n\npublic class MortgageCalculator {\n    public static void main(String[] args) {\n        System.out.print(\"Principal: \");\n        Scanner principal = new Scanner(System.in);\n        long principalAmount = principal.nextLong();\n\n        System.out.print(\"Annual Interest Rate(%): \");\n        Scanner rate = new Scanner(System.in);\n        float interestRate = rate.nextFloat();\n\n        System.out.print(\"Period (Years): \");\n        Scanner period = new Scanner(System.in);\n        int periodeYears = period.nextInt() ;\n\n        double monthPayment = calculateMorgage(principalAmount, interestRate, periodeYears);\n        System.out.print(\"Mortgage: \" + NumberFormat.getCurrencyInstance().format(monthPayment));\n        \n        principal.close();\n        rate.close();\n        period.close();\n    }\n    public static double calculateMorgage(long principal, float interestRate, int periodeYears){\n        float monthlyInterestRate = interestRate / 1200;\n        int periodeMonth = periodeYears * 12;\n        double secretNumber = Math.pow(1+monthlyInterestRate, periodeMonth);\n        double monthPayment = principal * ((monthlyInterestRate * secretNumber)/(secretNumber-1));\n        return monthPayment;\n    }\n}\n\n\nDon’t use any MAGIC NUMBER. Instead use constant so others can understand what it is\nuse proper variableName –&gt; meaningfull and descriptive name\n\nSolusi pak Mosh\npackage Types;\nimport java.text.NumberFormat;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        final byte MONTHS_IN_YEAR = 12;\n        final byte PERCENT = 100;\n\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.print(\"Principal: \");\n        int principal = scanner.nextInt();\n\n        System.out.print(\"Annual Interest Rate: \");\n        float annualInterest = scanner.nextFloat();\n        float monthlyInterest = annualInterest / PERCENT / MONTHS_IN_YEAR;\n\n        System.out.print(\"Period (Years): \");\n        byte years = scanner.nextByte();\n        int numberOfPayments = years * MONTHS_IN_YEAR;\n\n        double mortgage = principal\n                    * (monthlyInterest * Math.pow(1 + monthlyInterest, numberOfPayments))\n                    / (Math.pow(1 + monthlyInterest, numberOfPayments) - 1);\n\n        String mortgageFormatted = NumberFormat.getCurrencyInstance().format(mortgage);\n        System.out.println(\"Mortgage: \" + mortgageFormatted);\n\n        scanner.close();\n    }\n}",
    "crumbs": [
      "Fundamental",
      "Types"
    ]
  }
]